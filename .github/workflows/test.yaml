name: Test
on:
  push:
    branches:
      - main
  pull_request: {}

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install dependencies
        run: |
            pip install -r requirements.txt
      - name: Build Wheels
        run: |
          python make_wheels.py
      - name: Show built files
        run: |
            ls -l dist/*
      - uses: actions/upload-artifact@v3
        with:
            name: nodejs-pip-wheels
            path: dist
            if-no-files-found: error
            retention-days: 1

  test:
    name: "Test ${{ matrix.os }} Python:${{ matrix.python-version }} NodeJS:${{ matrix.nodejs-version }}"
    runs-on: ${{ matrix.os }}
    needs: [build-wheels]
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        nodejs-version: ['14.19.3', '16.15.1', '18.4.0']
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v3
        with:
            name: nodejs-pip-wheels
            path: dist
      - name: Show available wheels
        run: |
          ls dist
      - name: Install Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
            WHEELS_TO_INSTALL=$(find dist -name "*${{matrix.nodejs-version}}*py3*manylinux*x86_64.whl")
            echo "WHEELS_TO_INSTALL=${WHEELS_TO_INSTALL}"
            pip install ${WHEELS_TO_INSTALL}
      - name: Install Package (Mac OS)
        if: matrix.os == 'macos-latest'
        run: |
            WHEELS_TO_INSTALL=$(find dist -name "*${{matrix.nodejs-version}}*py3*macosx*x86_64.whl")
            echo "WHEELS_TO_INSTALL=${WHEELS_TO_INSTALL}"
            pip install ${WHEELS_TO_INSTALL}
      - name: Install Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
            pip install dist\nodejs_bin-${{matrix.nodejs-version}}a3-py3-none-win_amd64.whl
      - name: Test Package
        run:
            python -W error -m nodejs --version
            python -W error -m nodejs.npm --version

  test-docker:
    name: "Test Docker Architecture:${{ matrix.cpu-arch }} OS:${{ matrix.os-variant }} Python:${{ matrix.python-version }} NodeJS:${{ matrix.nodejs-version }}"
    runs-on: ubuntu-latest
    needs: [build-wheels]
    strategy:
      fail-fast: false
      matrix:
        os-variant: [alpine, slim-buster, slim-bullseye]
        cpu-arch: [linux/amd64, linux/arm64]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        nodejs-version: ['14.19.3', '16.15.1', '18.4.0']

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - uses: actions/download-artifact@v3
        with:
            name: nodejs-pip-wheels
            path: dist
      - name: List available wheels
        run: |
          ls -lah dist
      - name: Docker build
        run: |
          wheel_prefix_except_platform=nodejs_bin-${{ matrix.nodejs-version }}a3-py3-none
          
          case ${{ matrix.cpu-arch }} in
            linux/amd64)
              python_cpu_arch=x86_64
              python_libc_variant=2_12
              manylinux_variant_year=2010
              ;;
            linux/arm64)
              python_cpu_arch=aarch64
              python_libc_variant=2_17
              manylinux_variant_year=2014
              ;;
            *)
              echo "Could not parse the CPU architecture"
              exit 1
              ;;
          esac

          case ${{ matrix.os-variant }} in
            alpine)
              python_platform=musllinux_1_1_${python_cpu_arch}
              ;;
            slim-buster | slim-bullseye)
              python_platform=manylinux_${python_libc_variant}_${python_cpu_arch}.manylinux${manylinux_variant_year}_${python_cpu_arch}
              ;;
            *)
              echo "Could not parse the OS variant"
              exit 1
              ;;
          esac
          
          WHEEL_TO_INSTALL=${wheel_prefix_except_platform}-${python_platform}.whl
          echo "WHEEL_TO_INSTALL=${WHEEL_TO_INSTALL}"

          docker build \
            -f Dockerfile \
            --platform=${{ matrix.cpu-arch }} \
            --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
            --build-arg OS_VARIANT=${{ matrix.os-variant }} \
            --build-arg WHEEL_TO_INSTALL=${WHEEL_TO_INSTALL} \
            .
